import nacl.encoding
import nacl.signing
replica = import_da('Replica')

class Olympus(process):
  def setup(conf):
    self.replicas = {}
    self.clientKeyMap = {}
    self.replicaKeyMap = {}
    self.prikey = ""
    self.pubkey = ""

  def run():
    self.prikey = nacl.signing.SigningKey.generate()
    self.pubkey = self.prikey.verify_key
    create_replicas()
    while(True):
      await(False)

  def receive(msg = ('get_public_key_maps'), from_ = p_id):
    send(('public_key_maps', self.clientKeyMap, self.replicaKeyMap), to = p_id)

  def receive(msg = ('getConfig', p), from_ = client_id):
    output("Sending current config to : ", client_id)
    send(('currentConfig', self.replicas), to = client_id)

  def receive(msg = ('generate_keys'), from_=client_id):
    pri_key = nacl.signing.SigningKey.generate()
    pub_key = pri_key.verify_key
    self.clientKeyMap[client_id] = pub_key
    send(('generated_key', pri_key), to = client_id)

  def receive(msg = ('get_chain_info'), from_ = replica_id):
    rep = list(self.replicas)
    headReplica = rep[0]
    for i in range(0, len(rep)):
      if(rep[i] == replica_id):
        break
    if (i == 0):
      send(('val_chain_info', None, rep[i+1], headReplica), to = replica_id)
    elif (i == (len(rep) - 1)):
      send(('val_chain_info', rep[i - 1], None, headReplica), to = replica_id)
    else:
      send(('val_chain_info', rep[i - 1], rep[i+1], headReplica), to = replica_id)

  def create_replicas():
    num_replicas = 2 * conf['t'] + 1
    self.replicas = new(replica.Replica, num = num_replicas)
    output(self.replicas)
    cnt = 0
    for r in self.replicas:
      pri_key = nacl.signing.SigningKey.generate()
      pub_key = pri_key.verify_key
      self.replicaKeyMap[r] = pub_key
      if(cnt == 0):
        setup(r, (conf, True, False, pri_key, self))
      elif(cnt == (len(self.replicas) - 1)):
        setup(r, (conf, False, True, pri_key, self))
      else:
        setup(r, (conf, False, False, pri_key, self))
      start(r)
      cnt = cnt + 1
