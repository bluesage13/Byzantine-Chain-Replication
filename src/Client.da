import random
replica = import_da('Replica')
olympus = import_da('Olympus')

class Client(process):

  def setup(conf, oly, workload):
    self.replicas = {}
    self.flag = 0

  def run():
    send(('getConfig', self), to = oly)
    await(len(self.replicas) != 0)
    output (" The workload is: ", workload)
    if(workload[0][0:6] == 'pseudo'):
      key_val = workload[0][13:(len(workload[0])-1)]
      seed = int(key_val.split(',')[0])
      opn = int(key_val.split(',')[1])
      workload = getPseudorandomWL(seed, opn)

    rep = list(self.replicas)
    head = rep[0]
    opNum = 0
    for op in workload:
      op_b = op[0:3]
      if(op_b == 'put'):
        key_val = op[4:(len(op)-1)]
        args = getArguments(key_val)
        send(('put', args, self, generateRequestId(opNum)), to = head)
        await(flag == 1)
        flag = 0

      elif(op_b == 'get'):
        key = op[4:(len(op)-1)]
        args = getArguments(key)
        send(('get', (args[0]), self, generateRequestId(opNum)), to = head)
        await(flag == 1)
        self.flag = 0

      elif(op_b == 'sli'):
        key_val = op[6:(len(op)-1)]
        args = getArguments(key_val)
        send(('slice', args, self, generateRequestId(opNum)), to = head)
        await(flag == 1)
        self.flag = 0

      elif(op_b == 'app'):
        key_val = op[7:(len(op)-1)]
        args = getArguments(key_val)
        send(('append', args, self, generateRequestId(opNum)), to = head)
        await(flag == 1)
        self.flag = 0

      opNum = opNum + 1



    send(('get_dict'), to = head)
    await(flag == 1)
    flag = 0

  def generateRequestId(opNum):
    requestID = str(self) + ';' + str(opNum)
    return requestID

  def receive(msg=('put_result', resultShuttle ,requestID), from_=tail_id):
    for key in resultShuttle:
      resultStatements = resultShuttle[key]
      for i in range(0, (len(resultStatements) - 1)):
        if(resultStatements[i].split(';')[1] != resultStatements[i+1].split(';')[1]):
          output("error")
      output("Put Successful")

    flag = flag + 1

  def receive(msg=('get_result', resultShuttle ,requestID), from_=tail_id):
    for key in resultShuttle:
      resultStatements = resultShuttle[key]
      for i in range(0, (len(resultStatements) - 1)):
        if(resultStatements[i].split(';')[1] != resultStatements[i+1].split(';')[1]):
          output("error")
      if(resultStatements[0].split(';')[1] != ""):
        output("The value for key is: ", resultStatements[0].split(';')[1])
      else:
        output("Key does not exist in database")

    flag = flag + 1

  def receive(msg=('slice_result', resultShuttle ,requestID), from_=tail_id):
    for key in resultShuttle:
      resultStatements = resultShuttle[key]
      for i in range(0, (len(resultStatements) - 1)):
        if(resultStatements[i].split(';')[1] != resultStatements[i+1].split(';')[1]):
          output("error")
      if(resultStatements[i].split(';')[1] != "FAIL"):
        output("Split successful")
      else:
        output("Split unsuccessful as key is not present.")
    flag = flag + 1

  def receive(msg=('append_result', resultShuttle ,requestID), from_=tail_id):
    for key in resultShuttle:
      resultStatements = resultShuttle[key]
      for i in range(0, (len(resultStatements) - 1)):
        if(resultStatements[i].split(';')[1] != resultStatements[i+1].split(';')[1]):
          output("error")
      if(resultStatements[i].split(';')[1] != "FAIL"):
        output("Append successful")
      else:
        output("Append unsuccessful as key is not present.")
    flag = flag + 1

  def receive(msg=('currentConfig', replicas), from_=olympus_id):
    self.replicas = replicas

  def receive(msg = ('dict_reply', db), from_ = p_id):
    output("Current State: ", db)
    flag = flag + 1

  def getArguments(key_val):
    args_t = key_val.split(',')
    args = []
    for arg in args_t:
      arg = arg.strip()
      args.append(arg[1:(len(arg)-1)])
    return args

  def getPseudorandomWL(seed, nOps):
    with open("words.txt") as f:
      words = f.read().splitlines()
    operations = ['put', 'get', 'append', 'slice']
    random.seed(seed)
    ind = [x%4 for x in random.sample(range(nOps * 2), nOps)]
    listops = [operations[x] for x in ind]
    ind = [x for x in random.sample(range(20000), nOps * 3)]
    act_words = [words[x] for x in ind]
    #random.seed(None)
    workload = ""
    for op in listops:
        if(op == 'put'):
            str1 = act_words[random.randint(0,len(act_words) - 1)]
            str2 = act_words[random.randint(0,len(act_words) - 1)]
            workload = workload + ";" + "put('" + str1 + "','" + str2 + "')"
        elif(op == 'get'):
            str1 = act_words[random.randint(0,len(act_words) - 1)]
            workload = workload + ";" + "get('" + str1 + "')"
        elif(op == 'append'):
            str1 = act_words[random.randint(0,len(act_words) - 1)]
            str2 = act_words[random.randint(0,len(act_words) - 1)]
            workload = workload + ";" + "append('" + str1 + "','" + str2 + "')"
        elif(op == 'slice'):
            str1 = act_words[random.randint(0,len(act_words) - 1)]
            num1 = random.randint(1, len(str1))
            num2 = random.randint(1, len(str1))
            if num1 > num2 : str2 = str(num2) +":"+ str(num1)
            else: str2 = str(num1) +":"+ str(num2)
            workload = workload + ";" + "slice('" + str1 + "','" + str2 + "')"
    output(workload.strip(';').split(';'))
    return workload.strip(';').split(';')
