# -*- generated by 1.0.9 -*-
import da
_config_object = {}
import time
import sys
import logging
olympus = da.import_da('Olympus')
client = da.import_da('Client')

def get_logger(name, filename):
    formatter = logging.Formatter(fmt='%(asctime)s %(levelname)-8s %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    hld = logging.FileHandler(filename, mode='w')
    hld.setFormatter(formatter)
    logger = logging.getLogger(name)
    logger.setLevel(logging.DEBUG)
    logger.addHandler(hld)
    return logger

def getWorkload(conf):
    workload = {}
    for (key, val) in conf.items():
        if (key[0:8] == 'workload'):
            ind = ''
            for c in key[8:len(key)]:
                if ((not (c == '[')) and (not (c == ']'))):
                    ind = (ind + c)
            temp = val.split(';')
            commands = []
            for cmd in temp:
                commands.append(cmd.strip())
            workload[ind] = commands
    return workload

def getFailureCases(conf):
    failureCases = {}
    for (key, val) in conf.items():
        if (key[0:8] == 'failures'):
            r_num = ''
            for c in key[9:(len(key) - 1)]:
                r_num = (r_num + c)
            r_num = int(r_num.split(',')[1])
            temp = val.split(';')
            trig_fail = []
            for tf in temp:
                trig_fail.append(tf.strip())
            failureCases[r_num] = trig_fail
    return failureCases

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        conf = {}
        workload = {}
        failureCases = {}
        cni = {}
        with open(sys.argv[1], 'r') as f:
            for line in f:
                if (not (line[0] == '#')):
                    (key, sep, val) = line.partition('=')
                    if (not (len(sep) == 0)):
                        val = val.strip()
                        conf[key.strip()] = (int(val) if str.isdecimal(val) else val)
        workload = getWorkload(conf)
        failureCases = getFailureCases(conf)
        self.output(failureCases)
        cli = self.new(client.Client, num=conf['num_client'])
        i = 0
        for c in cli:
            cni[i] = c
            i = (i + 1)
        self.output('Creating Olympus')
        oly = self.new(olympus.Olympus, num=1)
        self._setup(oly, (conf, cni, failureCases, 0))
        self._start(oly)
        self.output('Creating Client')
        w = 0
        for c in cli:
            self._setup(c, (conf, oly, workload[str(w)], 0))
            self._start(c)
            w = (w + 1)
        sys.exit()
